name: plan-and-generate

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  issues: write
  projects: write

concurrency:
  group: plan-and-generate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run:
    if: contains(github.event.issue.labels.*.name, 'type:initiative')
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: ensureJq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: parseIssue
        id: parse
        run: |
          python - <<'PY'
          import os, re, json, pathlib
          body = os.environ['BODY']
          def grab(key, multi=False):
              pat = rf"{key}[\\s\\S]*?\\n([\\s\\S]*?)\\n"
              m = re.search(pat, body, re.I)
              if not m: return [] if multi else ""
              val = m.group(1).strip()
              if multi:
                  lines = [re.sub(r"^\\d+\\.\\s*","",l).strip() for l in val.splitlines()]
                  return [x for x in lines if x]
              return val
          out = {
            "initiativeTitle": grab("initiativeTitle"),
            "pillar": grab("pillar") or grab("archetype"),
            "domain": grab("domain"),
            "capabilityAreas": grab("capabilityAreas", multi=True)
          }
          pathlib.Path("parsed.json").write_text(json.dumps(out, indent=2))
          PY
        env:
          BODY: ${{ github.event.issue.body }}

      - name: generateIds
        id: ids
        shell: bash
        run: |
          node - <<'NODE' >> "$GITHUB_OUTPUT"
          const fs = require('fs');
          const p = JSON.parse(fs.readFileSync('parsed.json','utf8'));
          const slug = (p.initiativeTitle||'untitled').toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');
          const d = new Date().toISOString().slice(0,10);
          console.log(`initiativeId=${d}-${slug}`);
          NODE
      
      - name: saveSummaryCard
        run: |
          mkdir -p "outputs/${{ steps.ids.outputs.initiativeId }}"
          cat > "outputs/${{ steps.ids.outputs.initiativeId }}/summaryCard.md" <<EOF
          # summaryCard
          initiativeId: ${{ steps.ids.outputs.initiativeId }}
          pillar: $(jq -r .pillar parsed.json)
          domain: $(jq -r .domain parsed.json)
          capabilityAreas:
          $(jq -r '.capabilityAreas[]? | "- " + .' parsed.json)
          EOF

      - name: commitOutputs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(outputs): add summaryCard for ${{ steps.ids.outputs.initiativeId }}"
          branch: ${{ github.ref_name }}

      - name: createEpicsFromCapabilities
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('parsed.json','utf8'));
            const initiativeId = '${{ steps.ids.outputs.initiativeId }}';
            const pillar = data.pillar || 'Guidance';
            const domain = data.domain || 'visionAndStrategyExecution';

            for (const cap of (data.capabilityAreas||[])) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🗂️ [Epic] ${cap}`,
                labels: ['type:epic','status:planning', `pillar:${pillar}`, `domain:${domain}`, `parent:${initiativeId}`],
                body: `auto-created from initiative **${initiativeId}**\n\ncapability: \`${cap}\``
              });
            }

      - name: commentDone
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "✅ plan-and-generate completed: epics created and summaryCard saved."
            })
