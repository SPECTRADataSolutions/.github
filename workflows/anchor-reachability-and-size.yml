# SPECTRA Anchor Governance Workflow
# Purpose: Measure context anchor reachability (HTTP/file availability), size aggregation, and coverage; enforce gates; open/update initiative issue when below thresholds.
# Inputs:
#   manifestPath (string) - path to anchor manifest (JSON Lines or JSON array). Default: .github/context/anchors.jsonl
#   coverageThreshold (int) - minimum % reachable anchors. Default: 85
#   maxTotalMB (int) - maximum aggregate size in MB. Default: 50
#   maxAnchorKB (int) - soft per-anchor size limit in KB. Default: 256
# Key Outputs (from metrics step): coverage, total, total_mb, unreachable, oversized, oversize_list, unreachable_list, size_exceeded
# Notes: Metrics logic resides in .github/scripts/anchor_metrics.sh for maintainability and to avoid YAML indentation brittleness.
name: anchor-reachability-and-size

on:
  schedule:
    - cron: "13 4 * * *"
  workflow_dispatch:
    inputs:
      manifestPath:
        description: Path to anchor manifest (JSON lines or JSON array)
        required: false
        default: ".github/context/anchors.jsonl"
      coverageThreshold:
        description: Minimum reachable coverage % required
        required: false
        default: "85"
      maxTotalMB:
        description: Max aggregate size in MB
        required: false
        default: "50"
      maxAnchorKB:
        description: Soft per-anchor size limit KB
        required: false
        default: "256"

permissions:
  contents: read
  issues: write

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      MANIFEST_PATH: ${{ github.event.inputs.manifestPath || '.github/context/anchors.jsonl' }}
      COVERAGE_THRESHOLD: ${{ github.event.inputs.coverageThreshold || '85' }}
      MAX_TOTAL_MB: ${{ github.event.inputs.maxTotalMB || '50' }}
      MAX_ANCHOR_KB: ${{ github.event.inputs.maxAnchorKB || '256' }}
    steps:
      - uses: actions/checkout@v4
      - name: Manifest presence
        run: |
          if [ ! -f "$MANIFEST_PATH" ]; then
            echo "::error title=Manifest Missing::$MANIFEST_PATH not found";
            exit 1;
          fi
      - name: Collect metrics
        id: metrics
        run: bash .github/scripts/anchor_metrics.sh
      - name: Gates (coverage & size)
        run: |
          c=${{ steps.metrics.outputs.coverage || '0' }}
          thr=$COVERAGE_THRESHOLD
          if [ "$c" -lt "$thr" ]; then echo "::error title=Coverage Gate Failed::${c}% < ${thr}%"; fail=1; fi
          if [ "${{ steps.metrics.outputs.size_exceeded }}" = "true" ]; then echo "::error title=Size Limit Exceeded::Total MB ${{ steps.metrics.outputs.total_mb }} > $MAX_TOTAL_MB"; fail=1; fi
          [ "${fail:-0}" = 1 ] && exit 1 || echo "Gates passed"
      - name: Initiative issue (gap)
        if: steps.metrics.outputs.coverage != '' && steps.metrics.outputs.coverage != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const cov = parseInt('${{ steps.metrics.outputs.coverage }}', 10);
            const thr = parseInt(process.env.COVERAGE_THRESHOLD, 10);
            if (cov >= thr) { core.info('Coverage meets threshold; no gap issue.'); return; }
            const body = `Automated gap report\n\nCoverage: ${cov}% (threshold ${thr}%)\nUnreachable: ${{ steps.metrics.outputs.unreachable }}\nOversized: ${{ steps.metrics.outputs.oversized }}\nTotal Anchors: ${{ steps.metrics.outputs.total }}\nTotal Size: ${{ steps.metrics.outputs.total_mb }}MB (limit ${{ env.MAX_TOTAL_MB }}MB)\n\nOversized List:\n${{ steps.metrics.outputs.oversize_list || 'None' }}\nUnreachable List:\n${{ steps.metrics.outputs.unreachable_list || 'None' }}`;
            const title = 'ðŸ“Š Context Anchor Coverage Gap';
            const existing = await github.paginate(github.rest.issues.listForRepo, { ...context.repo, state: 'open', labels: 'coverage:gap' });
            const match = existing.find(i => i.title === title);
            if (match) {
              await github.rest.issues.createComment({ ...context.repo, issue_number: match.number, body });
            } else {
              await github.rest.issues.create({ ...context.repo, title, body, labels: ['type:initiative','coverage:gap','priority:medium'] });
            }
      - name: Summary (always)
        if: always()
        run: cat "$GITHUB_STEP_SUMMARY"
