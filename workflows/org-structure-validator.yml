name: Organisational Structure Validator
description: "Validates repository metadata against SPECTRA canonical organisational structure"

on:
  workflow_call:
    inputs:
      pillar:
        description: "High-level capability pillar"
        required: true
        type: string
      domain:
        description: "Single-word camelCase domain"
        required: true
        type: string
      capabilities:
        description: "Single-word camelCase capabilities"
        required: true
        type: string
      repository:
        description: "Repository name"
        required: false
        type: string
        default: ${{ github.repository }}

jobs:
  validate-organisational-structure:
    runs-on: ubuntu-latest
    name: Validate Organisational Structure
    
    steps:
      - name: Checkout .github repository for schema
        uses: actions/checkout@v4
        with:
          repository: SPECTRADataSolutions/.github
          path: .github-repo
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm install -g ajv-cli
          
      - name: Extract repository name
        id: repo-name
        run: |
          if [ -n "${{ inputs.repository }}" ]; then
            REPO_NAME="${{ inputs.repository }}"
          else
            REPO_NAME="${{ github.repository }}"
          fi
          REPO_BASENAME=$(basename "$REPO_NAME")
          echo "repository=$REPO_BASENAME" >> $GITHUB_OUTPUT
          
      - name: Create metadata object for validation
        id: metadata
        run: |
          cat > metadata.json << EOF
          {
            "pillar": "${{ inputs.pillar }}",
            "domain": "${{ inputs.domain }}",
            "capabilities": "${{ inputs.capabilities }}",
            "repository": "${{ steps.repo-name.outputs.repository }}"
          }
          EOF
          echo "Created metadata object:"
          cat metadata.json
          
      - name: Validate against schema
        run: |
          echo "Validating organisational structure metadata..."
          ajv validate \
            -s .github-repo/contracts/orgStructureMetadata.json \
            -d metadata.json
            
      - name: Validate naming conventions
        run: |
          PILLAR="${{ inputs.pillar }}"
          DOMAIN="${{ inputs.domain }}"
          CAPABILITIES="${{ inputs.capabilities }}"
          REPO="${{ steps.repo-name.outputs.repository }}"
          
          echo "Validating naming conventions..."
          
          # Check pillar is in allowed list
          case $PILLAR in
            "Guidance"|"Innovation"|"Engagement"|"Operations"|"Protection"|"Sustenance"|"Growth")
              echo "✅ Valid pillar: $PILLAR"
              ;;
            *)
              echo "❌ Invalid pillar: $PILLAR"
              echo "   Must be one of: Guidance, Innovation, Engagement, Operations, Protection, Sustenance, Growth"
              exit 1
              ;;
          esac
          
          # Check domain is single word and camelCase
          if [[ ! $DOMAIN =~ ^[a-z][a-zA-Z]*$ ]]; then
            echo "❌ Domain must be single-word camelCase (starting with lowercase): $DOMAIN"
            exit 1
          fi
          
          # Check capabilities is single word and camelCase
          if [[ ! $CAPABILITIES =~ ^[a-z][a-zA-Z]*$ ]]; then
            echo "❌ Capabilities must be single-word camelCase (starting with lowercase): $CAPABILITIES"
            exit 1
          fi
          
          # Check repository follows GitHub conventions
          if [[ ! $REPO =~ ^[a-zA-Z0-9._-]+$ ]]; then
            echo "❌ Repository name contains invalid characters: $REPO"
            exit 1
          fi
          
          echo "✅ All naming conventions validated successfully"
          
      - name: Validation Summary
        run: |
          echo "🎯 Organisational Structure Validation Complete"
          echo "   Pillar: ${{ inputs.pillar }}"
          echo "   Domain: ${{ inputs.domain }}"
          echo "   Capabilities: ${{ inputs.capabilities }}"
          echo "   Repository: ${{ steps.repo-name.outputs.repository }}"
          echo "   ✅ All validations passed"