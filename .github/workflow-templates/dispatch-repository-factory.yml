name: dispatch-repository-factory

on:
  issue_comment:
    types: [created]

permissions:
  actions: write # to dispatch create/generate workflows
  issues: write # to comment back on the triggering issue

jobs:
  dispatch:
    if: contains(github.event.comment.body, '/repo create ')
    runs-on: ubuntu-latest
    steps:
      - name: parse-and-dispatch
        uses: actions/github-script@v7
        with:
          script: |
            const body=(context.payload.comment?.body||'').trim();
            const m=body.match(/^\/repo\s+create\s+([a-z][a-zA-Z0-9]*)\s+(.+)$/);
            if(!m) return;
            const repoName=m[1]; const rest=m[2];
            function grab(flag){ const re=new RegExp(`--${flag}\\s+("([^"]+)"|\\S+)`); const mm=rest.match(re); return mm? (mm[2]||mm[1]):null; }
            const pillar=grab('pillar')||'Guidance';
            const domain=grab('domain')||'governance';
            const capability=grab('capability')||'capability';
            const repoType=grab('type')||'governance';
            const visibility=(grab('visibility')||'private').toLowerCase();
            const description=grab('desc')||`SPECTRA ${pillar} â€” ${domain} â†’ ${capability}`;
            await github.rest.actions.createWorkflowDispatch({ owner: context.repo.owner, repo: context.repo.repo, workflow_id: 'create-repository-instance.yml', ref: context.payload.repository.default_branch, inputs:{ repoName, pillar, domain, capability, repoType, visibility, description } });
            const issueNumber=context.payload.issue?.number || Number((context.payload.comment?.issue_url||'').split('/').pop());
            if(issueNumber){ await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber, body: `ðŸš€ Repository creation requested for \`${repoName}\` (pillar=${pillar}, domain=${domain}, capability=${capability}, type=${repoType}, visibility=${visibility}). Dispatching factory.`}); }
