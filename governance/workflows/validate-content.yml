name: Content Validation
description: "Validates anchor and manifest structural integrity, size limits, and privacy compliance"

on:
  push:
    paths:
      - 'anchors/**'
      - 'manifests/**'
      - '.github/workflows/validate-content.yml'
      - 'governance/workflows/validate-content.yml'
  pull_request:
    paths:
      - 'anchors/**'
      - 'manifests/**'
      - '.github/workflows/validate-content.yml'
      - 'governance/workflows/validate-content.yml'
  workflow_dispatch:
    inputs:
      validatePath:
        description: "Specific path to validate (anchors/ or manifests/)"
        required: false
        default: ""

permissions:
  contents: read
  pull-requests: write

env:
  CONTRACTS_REPO: SPECTRADataSolutions/.github
  SCHEMA_PATH: contracts/context

jobs:
  validate-content:
    runs-on: ubuntu-latest
    name: Validate Content
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout contracts repository (schemas)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CONTRACTS_REPO }}
          path: contracts-repo
          sparse-checkout: |
            contracts/context
          sparse-checkout-cone-mode: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install validation tools
        run: |
          npm install -g ajv-cli js-yaml
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Detect files to validate
        id: detect-files
        run: |
          VALIDATE_PATH="${{ github.event.inputs.validatePath }}"
          
          if [ -n "$VALIDATE_PATH" ]; then
            # Manual dispatch with specific path
            if [ -d "$VALIDATE_PATH" ]; then
              find "$VALIDATE_PATH" -name "*.json" > /tmp/files_to_validate.txt
            else
              echo "::warning::Specified path $VALIDATE_PATH does not exist"
              touch /tmp/files_to_validate.txt
            fi
          else
            # Automatic detection based on changed files
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^(anchors|manifests)/.*\.json$' > /tmp/files_to_validate.txt || true
            else
              # Push event - check recent commits
              git diff --name-only HEAD~1 | grep -E '^(anchors|manifests)/.*\.json$' > /tmp/files_to_validate.txt || true
            fi
          fi
          
          FILE_COUNT=$(wc -l < /tmp/files_to_validate.txt)
          echo "fileCount=$FILE_COUNT" >> $GITHUB_OUTPUT
          
          echo "Files to validate ($FILE_COUNT):"
          cat /tmp/files_to_validate.txt

      - name: Validate anchor files
        id: validate-anchors
        if: steps.detect-files.outputs.fileCount > 0
        run: |
          set -e
          ANCHOR_SCHEMA="contracts-repo/${{ env.SCHEMA_PATH }}/anchor.json"
          MANIFEST_SCHEMA="contracts-repo/${{ env.SCHEMA_PATH }}/contextManifest.json"
          
          VALIDATION_ERRORS=0
          ANCHOR_COUNT=0
          MANIFEST_COUNT=0
          
          echo "## 📄 Content Validation Results" > /tmp/validation_report.md
          echo "" >> /tmp/validation_report.md
          
          while IFS= read -r file; do
            if [ -z "$file" ]; then continue; fi
            
            echo "Validating: $file"
            
            if [[ "$file" == anchors/* ]]; then
              ANCHOR_COUNT=$((ANCHOR_COUNT + 1))
              echo "### 🔸 Anchor: \`$file\`" >> /tmp/validation_report.md
              
              # Schema validation
              if ajv validate -s "$ANCHOR_SCHEMA" -d "$file" 2>/dev/null; then
                echo "✅ Schema validation passed" >> /tmp/validation_report.md
              else
                echo "❌ Schema validation failed" >> /tmp/validation_report.md
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
              
              # Size validation
              FILE_SIZE=$(stat -c%s "$file")
              MAX_SIZE=10485760  # 10MB
              if [ "$FILE_SIZE" -le "$MAX_SIZE" ]; then
                echo "✅ Size validation passed ($FILE_SIZE bytes)" >> /tmp/validation_report.md
              else
                echo "❌ Size validation failed ($FILE_SIZE bytes > $MAX_SIZE)" >> /tmp/validation_report.md
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
              
              # Content-specific validation
              REPO_OWNER=$(jq -r '.repository.owner // ""' "$file")
              if [ "$REPO_OWNER" = "SPECTRADataSolutions" ]; then
                echo "✅ Repository ownership valid" >> /tmp/validation_report.md
              else
                echo "❌ Invalid repository owner: $REPO_OWNER" >> /tmp/validation_report.md
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
              
              # Privacy checks
              IS_PRIVATE=$(jq -r '.privacy.isPrivateRepo // false' "$file")
              if [ "$IS_PRIVATE" = "false" ]; then
                echo "✅ Privacy compliance (public repo)" >> /tmp/validation_report.md
              else
                echo "⚠️ Private repository flagged - ensure no sensitive content" >> /tmp/validation_report.md
              fi
              
            elif [[ "$file" == manifests/* ]]; then
              MANIFEST_COUNT=$((MANIFEST_COUNT + 1))
              echo "### 📋 Manifest: \`$file\`" >> /tmp/validation_report.md
              
              # Schema validation for manifests
              if ajv validate -s "$MANIFEST_SCHEMA" -d "$file" 2>/dev/null; then
                echo "✅ Schema validation passed" >> /tmp/validation_report.md
              else
                echo "❌ Schema validation failed" >> /tmp/validation_report.md
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
              
              # Size validation
              FILE_SIZE=$(stat -c%s "$file")
              MAX_SIZE=1048576  # 1MB for manifests
              if [ "$FILE_SIZE" -le "$MAX_SIZE" ]; then
                echo "✅ Size validation passed ($FILE_SIZE bytes)" >> /tmp/validation_report.md
              else
                echo "❌ Size validation failed ($FILE_SIZE bytes > $MAX_SIZE)" >> /tmp/validation_report.md
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
            fi
            
            echo "" >> /tmp/validation_report.md
            
          done < /tmp/files_to_validate.txt
          
          echo "anchorCount=$ANCHOR_COUNT" >> $GITHUB_OUTPUT
          echo "manifestCount=$MANIFEST_COUNT" >> $GITHUB_OUTPUT
          echo "validationErrors=$VALIDATION_ERRORS" >> $GITHUB_OUTPUT
          
          echo "## 📊 Summary" >> /tmp/validation_report.md
          echo "- **Anchors validated:** $ANCHOR_COUNT" >> /tmp/validation_report.md
          echo "- **Manifests validated:** $MANIFEST_COUNT" >> /tmp/validation_report.md
          echo "- **Validation errors:** $VALIDATION_ERRORS" >> /tmp/validation_report.md
          
          if [ "$VALIDATION_ERRORS" -eq 0 ]; then
            echo "- **Status:** ✅ All validations passed" >> /tmp/validation_report.md
          else
            echo "- **Status:** ❌ Validation failures detected" >> /tmp/validation_report.md
          fi

      - name: Add validation report to summary
        if: steps.detect-files.outputs.fileCount > 0
        run: |
          cat /tmp/validation_report.md >> $GITHUB_STEP_SUMMARY

      - name: Comment on pull request
        if: github.event_name == 'pull_request' && steps.detect-files.outputs.fileCount > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('/tmp/validation_report.md', 'utf8');
            const errors = parseInt('${{ steps.validate-anchors.outputs.validationErrors }}');
            
            const header = errors === 0 
              ? '✅ **Content Validation Passed**' 
              : '❌ **Content Validation Failed**';
            
            const body = header + '\n\n' + report + '\n\n---\n*Automated validation by SPECTRA Context system*';

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Fail if validation errors
        if: steps.validate-anchors.outputs.validationErrors > 0
        run: |
          echo "::error title=Content Validation Failed::${{ steps.validate-anchors.outputs.validationErrors }} validation error(s) detected"
          exit 1

      - name: Success message
        if: steps.detect-files.outputs.fileCount == 0
        run: |
          echo "## ✅ No Content Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "No anchor or manifest files were changed in this commit." >> $GITHUB_STEP_SUMMARY