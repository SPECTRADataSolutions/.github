name: governanceGuards

on:
  issues:
    types: [opened, edited]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: enforceMinimumFields
        uses: actions/github-script@v7
        with:
          script: |
            const body = (context.payload.issue.body || '').toLowerCase();
            const required = [
              'dream',
              'pillar', // preferred
              'domain',
              'initiativeTitle',
              'purpose',
              'scope',
              'capabilityAreas',
              'deliverables',
              'successIndicators'
            ];
            // For compatibility, accept either pillar or archetype
            const body = (context.payload.issue.body || '').toLowerCase();
            const hasPillar = body.includes('pillar');
            const hasArchetype = body.includes('archetype');
            const missing = required.filter(k => {
              if (k === 'pillar') {
                return !hasPillar && !hasArchetype; // accept either
              }
              return !body.includes(k.toLowerCase());
            });
            if (missing.length) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `❌ Missing fields: ${missing.join(', ')}`
              });
              core.setFailed('Missing required fields');
            }

      - name: enforceCamelCaseTitle
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title || '';
            const noPrefix = title.replace(/\[.*?\]\s*/, ''); // strip [Type] prefix
            if (/[A-Z_]/.test(noPrefix)) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: '❌ Use camelCase in titles after the [Type] prefix'
              });
              core.setFailed('Title not in camelCase');
            }

      - name: validateOrganizationalStructure
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';
            
            // Extract organizational metadata
            const dreamMatch = body.match(/### dream\s*\n\s*([^\n]+)/i);
            const pillarMatch = body.match(/### pillar\s*\n\s*([^\n]+)/i);
            const archetypeMatch = body.match(/### archetype\s*\n\s*([^\n]+)/i);
            const domainMatch = body.match(/### domain\s*\n\s*([^\n]+)/i);
            
            // Use pillar if present, otherwise fall back to archetype for compatibility
            const pillarValue = pillarMatch ? pillarMatch[1].trim() : (archetypeMatch ? archetypeMatch[1].trim() : null);
            
            if (!dreamMatch || !pillarValue || !domainMatch) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: '❌ Missing organisational structure metadata (dream, pillar/archetype, domain)'
              });
              core.setFailed('Missing organisational metadata');
              return;
            }
            
            const dream = dreamMatch[1].trim();
            const pillar = pillarValue;
            const domain = domainMatch[1].trim();
            
            // Validate dream
            if (dream !== 'SPECTRA') {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `❌ Dream must be 'SPECTRA', got: ${dream}`
              });
              core.setFailed('Invalid dream value');
              return;
            }
            
            // Validate pillar
            const validPillars = ['Guidance', 'Innovation', 'Engagement', 'Operations', 'Protection', 'Sustenance', 'Growth'];
            if (!validPillars.includes(pillar)) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `❌ Invalid pillar: ${pillar}. Must be one of: ${validPillars.join(', ')}`
              });
              core.setFailed('Invalid pillar');
              return;
            }
            
            // Validate domain format (single-word camelCase)
            if (!/^[a-z][a-zA-Z]*$/.test(domain)) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `❌ Domain must be single-word camelCase starting with lowercase: ${domain}`
              });
              core.setFailed('Invalid domain format');
              return;
            }
            
            console.log(`✅ Organisational structure validated: ${dream} → ${pillar} → ${domain}`);

      - name: validateMcpContextCompliance
        if: contains(github.event.issue.body, 'contextManifest') || contains(github.event.issue.body, 'context') || contains(github.event.issue.body, 'anchor')
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';
            
            // Check for context-related content
            const contextKeywords = ['contextManifest', 'context', 'anchor', 'redaction', 'spectra.'];
            const hasContextContent = contextKeywords.some(keyword => body.toLowerCase().includes(keyword.toLowerCase()));
            
            if (hasContextContent) {
              console.log('🔍 Context content detected, validating compliance...');
              
              // Check for required privacy considerations
              const privacyKeywords = ['redaction', 'privacy', 'logContent', 'defaultDeny'];
              const hasPrivacyConsiderations = privacyKeywords.some(keyword => body.toLowerCase().includes(keyword.toLowerCase()));
              
              if (!hasPrivacyConsiderations) {
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: '⚠️ **Context Privacy Notice**: This issue relates to context functionality. Please ensure privacy and redaction policies are considered. Reference: contracts/context/redactionPolicy.json'
                });
              }
              
              // Check for Framework is Law compliance
              const frameworkKeywords = ['framework', 'contract', 'schema', 'pinned', 'SHA'];
              const hasFrameworkCompliance = frameworkKeywords.some(keyword => body.toLowerCase().includes(keyword.toLowerCase()));
              
              if (!hasFrameworkCompliance) {
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: '📋 **Framework is Law Reminder**: Context changes must comply with SPECTRA contracts in contracts/context/. Ensure refs are pinned to SHAs and validation is implemented.'
                });
              }
              
              console.log('✅ Context compliance validated');
            }
