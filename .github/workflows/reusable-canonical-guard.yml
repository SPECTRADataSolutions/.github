# Reusable Canonical Guard Workflow
#
# Enforces canonical organisational navigation standards across all repositories
#
# Usage in downstream repositories:
# ```yaml
# name: Canonical Navigation Guard
# on: [pull_request, issues]
# 
# jobs:
#   canonical-guard:
#     uses: SPECTRADataSolutions/.github/.github/workflows/reusable-canonical-guard.yml@main
# ```
#
# This workflow:
# 1. Blocks pull requests containing C*O acronyms in added lines
# 2. Requires README.md to contain navigation markers or canonical three-line format
# 3. Comments on issues containing banned C*O acronyms with canonical guidance

name: Canonical Navigation Guard

on:
  workflow_call:

jobs:
  validate-canonical-navigation:
    runs-on: ubuntu-latest
    name: Validate Canonical Navigation Standards
    
    steps:
      - name: Check for C*O acronyms in pull request changes
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              ...context.repo,
              pull_number: context.payload.pull_request.number
            });
            
            const bannedAcronyms = ['CFO', 'CTO', 'CIO', 'CMO', 'COO', 'CSO', 'CDO', 'CKO', 'CAO', 'COS', 'CEO'];
            const violationsFound = [];
            
            for (const file of files) {
              if (file.patch) {
                const addedLines = file.patch.split('\n').filter(line => line.startsWith('+'));
                for (const line of addedLines) {
                  for (const acronym of bannedAcronyms) {
                    if (line.includes(acronym)) {
                      violationsFound.push({
                        file: file.filename,
                        acronym: acronym,
                        line: line.trim()
                      });
                    }
                  }
                }
              }
            }
            
            if (violationsFound.length > 0) {
              const violationDetails = violationsFound.map(v => 
                `- **${v.file}**: Found \`${v.acronym}\` in: \`${v.line}\``
              ).join('\n');
              
              const canonicalMapping = {
                'CFO': 'Guidance',
                'CTO': 'Innovation', 
                'CMO': 'Engagement',
                'COO': 'Operations',
                'CSO': 'Protection',
                'CDO': 'Sustenance',
                'CEO': 'Growth',
                'CIO': 'appropriate canonical archetype',
                'CKO': 'appropriate canonical archetype',
                'CAO': 'appropriate canonical archetype', 
                'COS': 'appropriate canonical archetype'
              };
              
              const mappingSuggestions = Object.entries(canonicalMapping)
                .map(([legacy, canonical]) => `- ${legacy} ‚Üí **${canonical}**`)
                .join('\\n');
              
              const violationMessage = [
                '‚ùå **Canonical Navigation Violation**',
                '',
                'This pull request introduces legacy C*O acronyms in the following locations:',
                '',
                violationDetails,
                '',
                '**Required Action:** Replace legacy acronyms with canonical archetype names:',
                mappingSuggestions,
                '',
                'For detailed guidance, see [Canonical Organisational Structure](https://github.com/SPECTRADataSolutions/.github/blob/main/docs/canonicalOrganisationalStructure.md).',
                '',
                'If you need to document legacy aliases for historical context, add them to a `legacyAliases` section in your documentation rather than using them operationally.'
              ].join('\\n');
              
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.payload.pull_request.number,
                body: violationMessage
              });
              
              core.setFailed('Pull request contains banned C*O acronyms');
            }

      - name: Validate README navigation format
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              ...context.repo,
              pull_number: context.payload.pull_request.number
            });
            
            // Check if README.md is being modified or if this is a new repository
            const readmeFile = files.find(f => f.filename.toLowerCase() === 'readme.md');
            
            if (readmeFile) {
              // Get the current README content
              let readmeContent = '';
              try {
                const { data: readmeData } = await github.rest.repos.getContent({
                  ...context.repo,
                  path: 'README.md'
                });
                readmeContent = Buffer.from(readmeData.content, 'base64').toString();
              } catch (error) {
                // README might not exist yet, check the patch instead
                if (readmeFile.patch) {
                  const addedLines = readmeFile.patch.split('\n')
                    .filter(line => line.startsWith('+'))
                    .map(line => line.substring(1));
                  readmeContent = addedLines.join('\n');
                }
              }
              
              // Check for navigation markers or three-line format
              const hasNavigationMarkers = readmeContent.includes('<!-- NAVIGATION_START -->') && 
                                          readmeContent.includes('<!-- NAVIGATION_END -->');
              
              const hasThreeLineFormat = readmeContent.includes('Dream:') && 
                                        readmeContent.includes('Archetype:') && 
                                        readmeContent.includes('Domain:');
              
              if (!hasNavigationMarkers && !hasThreeLineFormat) {
                const navigationMessage = [
                  '‚ùå **Missing Canonical Navigation**',
                  '',
                  'This pull request modifies README.md but does not include the required canonical navigation format.',
                  '',
                  '**Required:** README.md must contain either:',
                  '',
                  '1. **Navigation block format** (recommended):',
                  '   ```markdown',
                  '   <!-- NAVIGATION_START -->',
                  '   ## üèõÔ∏è Organisational Structure',
                  '   **Dream:** SPECTRA',
                  '   **Archetype:** [YourArchetype]',
                  '   **Domain:** [yourDomain]',
                  '   **Repository:** [owner/repo]',
                  '   <!-- NAVIGATION_END -->',
                  '   ```',
                  '',
                  '2. **Three-line format** (minimum):',
                  '   ```markdown',
                  '   **Dream:** SPECTRA',
                  '   **Archetype:** [YourArchetype]',
                  '   **Domain:** [yourDomain]',
                  '   ```',
                  '',
                  'üìã Copy the navigation template from [navigationBlock.md](https://github.com/SPECTRADataSolutions/.github/blob/main/docs/snippets/navigationBlock.md)',
                  '',
                  'üìñ See [Canonical Organisational Structure](https://github.com/SPECTRADataSolutions/.github/blob/main/docs/canonicalOrganisationalStructure.md) for guidance.'
                ].join('\\n');
                
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.payload.pull_request.number,
                  body: navigationMessage
                });
                
                core.setFailed('README.md missing required canonical navigation format');
              }
            }

      - name: Check for C*O acronyms in issues
        if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'edited')
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title || '';
            const body = context.payload.issue.body || '';
            const fullText = `${title} ${body}`;
            
            const bannedAcronyms = ['CFO', 'CTO', 'CIO', 'CMO', 'COO', 'CSO', 'CDO', 'CKO', 'CAO', 'COS', 'CEO'];
            const foundAcronyms = bannedAcronyms.filter(acronym => fullText.includes(acronym));
            
            if (foundAcronyms.length > 0) {
              const canonicalMapping = {
                'CFO': 'Guidance',
                'CTO': 'Innovation', 
                'CMO': 'Engagement',
                'COO': 'Operations',
                'CSO': 'Protection',
                'CDO': 'Sustenance',
                'CEO': 'Growth',
                'CIO': 'appropriate canonical archetype',
                'CKO': 'appropriate canonical archetype',
                'CAO': 'appropriate canonical archetype', 
                'COS': 'appropriate canonical archetype'
              };
              
              const issueMappingSuggestions = foundAcronyms
                .map(acronym => `- ${acronym} ‚Üí **${canonicalMapping[acronym]}**`)
                .join('\\n');
              
              const issueMessage = [
                'üëã **Canonical Navigation Reminder**',
                '',
                `This issue contains legacy C*O acronyms: **${foundAcronyms.join(', ')}**`,
                '',
                'Please use canonical archetype names instead:',
                issueMappingSuggestions,
                '',
                '**Why?** Canonical names provide clear organisational structure and enable automated governance.',
                '',
                'üìã Reference: [Canonical Organisational Structure](https://github.com/SPECTRADataSolutions/.github/blob/main/docs/canonicalOrganisationalStructure.md)'
              ].join('\\n');
              
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: issueMessage
              });
            }