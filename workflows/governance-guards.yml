name: governanceGuards

on:
  issues:
    types: [opened, edited]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: enforceMinimumFields
        uses: actions/github-script@v7
        with:
          script: |
            const body = (context.payload.issue.body || '').toLowerCase();
            const required = [
              'dream',
              'archetype',
              'domain',
              'initiativeTitle',
              'purpose',
              'scope',
              'capabilityAreas',
              'deliverables',
              'successIndicators'
            ];
            const missing = required.filter(k => !body.includes(k.toLowerCase()));
            if (missing.length) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `❌ Missing fields: ${missing.join(', ')}`
              });
              core.setFailed('Missing required fields');
            }

      - name: enforceCamelCaseTitle
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title || '';
            const noPrefix = title.replace(/\[.*?\]\s*/, ''); // strip [Type] prefix
            if (/[A-Z_]/.test(noPrefix)) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: '❌ Use camelCase in titles after the [Type] prefix'
              });
              core.setFailed('Title not in camelCase');
            }

      - name: validateOrganizationalStructure
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';
            
            // Extract organizational metadata
            const dreamMatch = body.match(/### dream\s*\n\s*([^\n]+)/i);
            const archetypeMatch = body.match(/### archetype\s*\n\s*([^\n]+)/i);
            const domainMatch = body.match(/### domain\s*\n\s*([^\n]+)/i);
            
            if (!dreamMatch || !archetypeMatch || !domainMatch) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: '❌ Missing organizational structure metadata (dream, archetype, domain)'
              });
              core.setFailed('Missing organizational metadata');
              return;
            }
            
            const dream = dreamMatch[1].trim();
            const archetype = archetypeMatch[1].trim();
            const domain = domainMatch[1].trim();
            
            // Validate dream
            if (dream !== 'SPECTRA') {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `❌ Dream must be 'SPECTRA', got: ${dream}`
              });
              core.setFailed('Invalid dream value');
              return;
            }
            
            // Validate archetype
            const validArchetypes = ['Guidance', 'Innovation', 'Engagement', 'Operations', 'Protection', 'Sustenance', 'Growth'];
            if (!validArchetypes.includes(archetype)) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `❌ Invalid archetype: ${archetype}. Must be one of: ${validArchetypes.join(', ')}`
              });
              core.setFailed('Invalid archetype');
              return;
            }
            
            // Validate domain format (single-word camelCase)
            if (!/^[a-z][a-zA-Z]*$/.test(domain)) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `❌ Domain must be single-word camelCase starting with lowercase: ${domain}`
              });
              core.setFailed('Invalid domain format');
              return;
            }
            
            console.log(`✅ Organizational structure validated: ${dream} → ${archetype} → ${domain}`);
