name: removed-check-anchor-health
on: {}
jobs:
  removed:
    runs-on: ubuntu-latest
    steps:
      - run: echo "check-anchor-health workflow removed (stub)."

          if [ "$TOTAL_ANCHORS" -gt 0 ]; then
            COVERAGE=$(( REACHABLE * 100 / TOTAL_ANCHORS ))
          else
            COVERAGE=0
            - run: echo "check-anchor-health workflow removed (stub)."
            ### initiativeTitle
            contextAnchorCoverageGapResolution

            ### purpose
            Resolve reachability and size compliance gaps for context anchors to restore reliable contextual intelligence services.

            ### scope
            inScope:
            - Triaging unreachable anchors
            - Correcting or removing stale paths / refs
            - Remediating oversized anchors (refactor, split, compress)
            - Verifying MIME type allowlist compliance
            - Updating manifest for accuracy and least-privilege

            outOfScope:
            - Introducing new repositories outside current allowlist
            - Altering global size policy without governance approval
            - Non-compliance workarounds

            ### capabilityAreas
            anchorReachabilityResolution
            sizeComplianceOptimisation
            cacheUtilisationManagement
            manifestGovernance
            validationProcessImprovement

            ### deliverables
            - Updated manifest with only valid, reachable anchors
            - Remediation of all oversized entries or approved exceptions
            - Coverage ≥ ${thr}% sustained
            - Documented prevention measures (runbook update)

            ### successIndicators
            - Coverage restored to ≥ ${thr}%
            - Zero oversized anchors after remediation
            - No unreachable anchors across 3 consecutive daily scans
            - Aggregate size within limit

            ### constraints
            - Framework is Law (use only approved schemas/contracts)
            - British English & camelCase
            - Immutable refs (pin where production critical)
            - Honour privacy & MIME restrictions

            ### dependencies
            - contracts: schema validation (.github/contracts)
            - context: manifest & anchor content
            - source repos: referenced paths and commit SHAs

            ### automationOptions
            - [ ] generateInitiativeIdAndUuid
            - [ ] generateProjectsEpicsStories
            - [ ] runImpactAnalysis
            - [ ] computeExecutionReadinessScore

            ### currentFindings
            ${factors.map(f=>`- ${f}`).join(' \n ')}

            ### metrics
            - Total anchors: ${totalAnchors}
            - Reachable: ${reachable}
            - Coverage: ${cov}% (threshold ${thr}%)
            - Unreachable: ${unreachable}
            - Oversized: ${oversized}
            - Total size: ${totalSizeMB}MB

            Auto-generated by Anchor Reachability and Size Validator workflow.`

            const title = "📊 [Initiative] Context Anchor Coverage Gap Resolution";
            // Attempt to find existing open issue to avoid duplicates
            const existing = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              labels: "type:initiative"
            });
            const match = existing.data.find(i => i.title === title);
            if (match) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: match.number,
                body: `Automated update:\n\n${body}`
              });
              console.log(`🔁 Updated existing initiative issue #${match.number}`);
            } else {
              const created = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels: ["type:initiative","priority:medium","coverage:gap"]
              });
              console.log(`🆕 Created initiative issue #${created.data.number}`);
            }

      - name: Coverage Gate
        if: steps.manifest-validate.outputs.exists == 'true'
        run: |
          if [ -z "${COVERAGE:-}" ]; then
            echo "::error title=Coverage Missing::Coverage metric not exported"; exit 1; fi
          if [ "$COVERAGE" -ge "$COVERAGE_THRESHOLD" ]; then
            echo "✅ Coverage gate passed: ${COVERAGE}% ≥ ${COVERAGE_THRESHOLD}%"
          else
            echo "::error title=Coverage Gate Failed::Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"; exit 1
          fi

      - name: Job Summary
        if: always()
        run: |
          echo "## 📊 Anchor Reachability Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.manifest-validate.outputs.exists }}" != "true" ]; then
            echo "Manifest not found at ${MANIFEST_PATH}" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          echo "**Coverage Threshold:** ${COVERAGE_THRESHOLD}%" >> $GITHUB_STEP_SUMMARY
          echo "**Total Anchors:** ${TOTAL_ANCHORS}" >> $GITHUB_STEP_SUMMARY
          echo "**Reachable:** ${REACHABLE}" >> $GITHUB_STEP_SUMMARY
          echo "**Unreachable:** ${UNREACHABLE}" >> $GITHUB_STEP_SUMMARY
          echo "**Oversized:** ${OVERSIZED}" >> $GITHUB_STEP_SUMMARY
          echo "**Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "**Aggregate Size:** ${TOTAL_SIZE_KB}KB (limit ${MAX_TOTAL_MB}MB total)" >> $GITHUB_STEP_SUMMARY
          if [ "${SIZE_EXCEEDED}" = "true" ]; then
            echo "**Size Status:** ❌ Exceeded" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Size Status:** ✅ Within Limit" >> $GITHUB_STEP_SUMMARY
          fi
          if [ ${COVERAGE} -ge ${COVERAGE_THRESHOLD} ]; then
            echo "**Coverage Gate:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Coverage Gate:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ ${COVERAGE} -lt ${COVERAGE_THRESHOLD} ] || [ "${SIZE_EXCEEDED}" = "true" ] || [ ${OVERSIZED} -gt 0 ] || [ ${UNREACHABLE} -gt 0 ]; then
            echo "- Review or update context manifest paths/refs" >> $GITHUB_STEP_SUMMARY
            echo "- Remediate oversized anchors (split or compress)" >> $GITHUB_STEP_SUMMARY
            echo "- Replace unreachable paths or pin correct SHAs" >> $GITHUB_STEP_SUMMARY
          else
            echo "- All metrics within policy thresholds" >> $GITHUB_STEP_SUMMARY
          fi