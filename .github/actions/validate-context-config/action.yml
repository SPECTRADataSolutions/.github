name: 'Validate SPECTRA Context Configuration'
description: 'Validates context server configuration against SPECTRA security standards'
author: 'SPECTRA'

inputs:
  config-path:
    description: 'Path to context configuration YAML file'
    required: false
    default: 'config/contextConfig.yaml'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install validation dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema pyyaml
        
    - name: Download context config schema
      shell: bash
      run: |
        mkdir -p .contracts
        curl -s -o .contracts/contextConfig.json \
          https://raw.githubusercontent.com/SPECTRADataSolutions/.github/main/contracts/assistant/contextConfig.json
          
    - name: Validate context configuration
      shell: bash
      run: |
        python3 -c "
        import json
        import yaml
        import jsonschema
        import sys
        
        # Load context config
        try:
            with open('${{ inputs.config-path }}', 'r') as f:
                config = yaml.safe_load(f)
        except FileNotFoundError:
            print('❌ Context config file not found: ${{ inputs.config-path }}')
            sys.exit(1)
        except yaml.YAMLError as e:
            print(f'❌ Invalid YAML in context config: {e}')
            sys.exit(1)
            
        # Load schema
        try:
            with open('.contracts/contextConfig.json', 'r') as f:
                schema = json.load(f)
        except FileNotFoundError:
            print('❌ Could not download context config schema')
            sys.exit(1)
            
        # Schema validation
        try:
            jsonschema.validate(config, schema)
            print('✅ Context configuration schema validation passed')
        except jsonschema.ValidationError as e:
            print(f'❌ Schema validation failed: {e.message}')
            sys.exit(1)
        except Exception as e:
            print(f'❌ Validation error: {e}')
            sys.exit(1)
            
        # Security validation
        security = config.get('security', {})
        required_security = {
            'defaultPolicy': 'deny',
            'authenticationRequired': True,
            'auditLogging': True,
            'secretRedaction': True
        }
        
        for setting, required_value in required_security.items():
            actual_value = security.get(setting)
            if actual_value != required_value:
                print(f'❌ Security requirement failed: {setting} must be {required_value}, got {actual_value}')
                sys.exit(1)
                
        print('✅ Context security requirements validation passed')
        "

branding:
  icon: 'lock'
  color: 'red'