name: verify-policy-digests
description: Compute SHA256 digests for policy files and compare with recorded digest file; optional temporal freshness check.
inputs:
  policy_glob:
    description: Glob pattern for policy files (default framework/policies/*policy.*)
    required: false
    default: framework/policies/*policy.*
  digest_file:
    description: Path to recorded digest file
    required: false
    default: framework/policy-digests.txt
  enforce_freshness:
    description: 'If true, fail when latest policy commit is newer than digest commit'
    required: false
    default: 'true'
  fail_on_missing:
    description: 'Fail if digest file missing'
    required: false
    default: 'true'
outputs:
  mismatch:
    description: 'true if any digest mismatch detected'
    value: ${{ steps.compare.outputs.mismatch }}
  stale:
    description: 'true if attestation stale (digest commit older than latest policy change)'
    value: ${{ steps.fresh.outputs.stale }}
  current:
    description: 'Current computed digests list'
    value: ${{ steps.compute.outputs.current }}
  recorded:
    description: 'Recorded digests subset (parsed)'
    value: ${{ steps.compare.outputs.recorded }}
runs:
  using: composite
  steps:
    - name: compute-current
      id: compute
      shell: bash
      run: |
        set -euo pipefail
        glob='${{ inputs.policy_glob }}'
        tmp=$(mktemp)
        for f in $glob; do
          [ -f "$f" ] || continue
          sha=$(sha256sum "$f" | awk '{print $1}')
          printf "%s  %s\n" "$sha" "${f#framework/}" >> "$tmp"
        done
        sort -o "$tmp" "$tmp" || true
        echo 'current<<EOF' >> $GITHUB_OUTPUT
        cat "$tmp" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
    - name: compare-recorded
      id: compare
      shell: bash
      run: |
        set -euo pipefail
        mismatch=false
        digestFile='${{ inputs.digest_file }}'
        if [ ! -f "$digestFile" ]; then
          if [ '${{ inputs.fail_on_missing }}' = 'true' ]; then
            echo "::error::Digest file missing: $digestFile"; mismatch=true
          else
            echo "::warning::Digest file missing: $digestFile";
          fi
          echo "recorded=" >> $GITHUB_OUTPUT
          echo "mismatch=$mismatch" >> $GITHUB_OUTPUT
          exit 0
        fi
        grep -E '^[0-9a-f]{64}  ' "$digestFile" | sort > /tmp/recorded.txt || true
        echo 'recorded<<EOF' >> $GITHUB_OUTPUT
        cat /tmp/recorded.txt >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        # Build lookup for recorded
        while read -r line; do
          [ -n "$line" ] || continue
          sha=$(echo "$line"|awk '{print $1}')
          file=$(echo "$line"|awk '{print $2}')
          if ! grep -q "^$sha  $file$" <<< "${{ steps.compute.outputs.current }}"; then
            echo "::error::Digest mismatch or missing for $file"; mismatch=true
          fi
        done < /tmp/recorded.txt
        echo "mismatch=$mismatch" >> $GITHUB_OUTPUT
    - name: freshness-check
      id: fresh
      if: inputs.enforce_freshness == 'true'
      shell: bash
      run: |
        set -euo pipefail
        stale=false
        # Latest policy commit
        latestPolicy=$(git log -1 --format=%ct -- $(echo ${{ inputs.policy_glob }})) || true
        # Digest commit
        if [ -f '${{ inputs.digest_file }}' ]; then
          digestCommitTime=$(git log -1 --format=%ct -- '${{ inputs.digest_file }}' || echo 0)
          if [ -n "$latestPolicy" ] && [ "$digestCommitTime" -lt "$latestPolicy" ]; then
            echo "::error::Attestation stale (digest older than latest policy change)"; stale=true
          fi
        fi
        echo "stale=$stale" >> $GITHUB_OUTPUT
    - name: summarize
      shell: bash
      run: |
        echo "Policy Digests Summary" >> $GITHUB_STEP_SUMMARY
        echo "Mismatch: ${{ steps.compare.outputs.mismatch }}" >> $GITHUB_STEP_SUMMARY
        echo "Stale: ${{ steps.fresh.outputs.stale }}" >> $GITHUB_STEP_SUMMARY
        echo "\nCurrent Digests:\n\n">${GITHUB_STEP_SUMMARY}
        printf '%s\n' "${{ steps.compute.outputs.current }}" >> $GITHUB_STEP_SUMMARY
